{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2cd5af4d-8f28-4e1e-9424-4203b90dcf81",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Assignment 01\n",
    "\n",
    "# Task 1\n",
    "\n",
    "my_name = input(\"name: \")\n",
    "print(\"Hi \" + my_name + \"! Nice to meet you!\")\n",
    "print(\"Welcome to the Programming Course!\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "bdb5c3e1-a433-4059-b20d-587a1772cbcc",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "word:  hello\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "olleh\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "word:  hello\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "olleh\n"
     ]
    }
   ],
   "source": [
    "# Task 2\n",
    "\n",
    "#a\n",
    "word = input(\"word: \")\n",
    "def reverese_word(word):\n",
    "    return word[::-1]\n",
    "print(word[::-1])\n",
    "\n",
    "#b\n",
    "word = input(\"word: \")\n",
    "print(word [::-1]) # reverses string"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "339daf7d-b107-4852-9853-7deb77518847",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "number:  6\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0, 1, 1, 2, 3, 5]\n"
     ]
    }
   ],
   "source": [
    "# Task 3\n",
    "\n",
    "fibonacci = int(input(\"number: \"))\n",
    "\n",
    "n1 = 0\n",
    "n2 = 1\n",
    "nx = 0\n",
    "\n",
    "fibonacci_list = [n1, n2]\n",
    "\n",
    "while nx < fibonacci:\n",
    "    nx = n1 + n2\n",
    "    if nx >= fibonacci:\n",
    "        break\n",
    "    fibonacci_list.append(nx)\n",
    "    nx = n2\n",
    "    n2 = n1 + n2\n",
    "    n1 = nx\n",
    "\n",
    "print(fibonacci_list)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "fde2262e-ef5a-4734-88c1-0cc14ceba2e1",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "number:  33\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0, 1, 2, 4, 5, 7, 8, 10, 11, 13, 14, 16, 17, 19, 20, 22, 23, 25, 26, 28, 29, 31, 32]\n"
     ]
    }
   ],
   "source": [
    "# Task 4\n",
    "\n",
    "number = int(input(\"number: \"))\n",
    "\n",
    "liste = [0, ]\n",
    "\n",
    "for num in range(0, number):\n",
    "    if num%3 == 0:               # wenn der Rest 0 ist, dann fang nochmal neu an\n",
    "        continue\n",
    "    liste.append(num)\n",
    "        \n",
    "print(liste)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "ef050d9b-a63d-4a7f-aa00-c6e9bdaa2474",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "number:  1\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0\n",
      "1\n"
     ]
    }
   ],
   "source": [
    "# Task 4\n",
    "\n",
    "number = int(input(\"number: \"))\n",
    "\n",
    "x = 0\n",
    "print(x)\n",
    "\n",
    "while x <= number:\n",
    "\n",
    "    if(x % 3 != 0):    # if modulus (Rest) is 0, print\n",
    "        print(x)\n",
    "    x += 1             # new x"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "7f59fd15-93eb-4395-bdc8-01cf4ce5ceb1",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "a:  1\n",
      "b:  1\n",
      "c:  4\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The triangle is isoscele.\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "a:  23\n",
      "b:  55\n",
      "c:  53\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The Triangle inequality is true\n"
     ]
    }
   ],
   "source": [
    "# Task 5 \n",
    "\n",
    "a = int(input(\"a: \"))\n",
    "b = int(input(\"b: \"))\n",
    "c = int(input(\"c: \"))\n",
    "\n",
    "if a==b==c:\n",
    "    print(\"The triangle is equilateral.\")\n",
    "\n",
    "if a==b or b==c or a==c:\n",
    "    print(\"The triangle is isoscele.\")\n",
    "    \n",
    "if a!=b and b!=c and a!=c:\n",
    "    print(\"The triangle is scalene\")\n",
    "    \n",
    "while not (c<(a+b)):\n",
    "    a = int(input(\"a: \"))\n",
    "    b = int(input(\"b: \"))\n",
    "    c = int(input(\"c: \"))\n",
    "print(\"The Triangle inequality is true\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "41bc288b-812d-4a0f-8879-1fdeb2f1f564",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "number:  167\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0o247\n",
      "0b10100111\n"
     ]
    }
   ],
   "source": [
    "# Task 6\n",
    "\n",
    "number = int(input(\"number: \"))\n",
    "assert number >= 0                # wenn -Zahl, dann Fehlermeldung (assert: sicher gehen, dass die Zahl größer als 0 ist)\n",
    "    \n",
    "print(oct(number))\n",
    "print(bin(number))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "7cd8208c-4240-42dd-a656-6b395fbcbc31",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "number:  25.11\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.34999999999999901.1\n"
     ]
    }
   ],
   "source": [
    "number = float(input(\"number: \"))\n",
    "\n",
    "oct1 = \"\"\n",
    "\n",
    "while number > 0:\n",
    "    oct1 += str(number%8)\n",
    "    number = number//8\n",
    "print(oct1[::-1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "31eccd9a-dc10-4926-9b15-bf8b2a66fa03",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
